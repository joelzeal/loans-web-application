//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoanWebApplication4 {
    
    
    public partial class FinanceManagerCacheClientSyncProvider : Microsoft.Synchronization.Data.SqlServerCe.SqlCeClientSyncProvider {
        
        public FinanceManagerCacheClientSyncProvider() {
            this.ConnectionString = global::LoanWebApplication4.Properties.Settings.Default.ClientFINANCEMANAGERConnectionString;
        }
        
        public FinanceManagerCacheClientSyncProvider(string connectionString) {
            this.ConnectionString = connectionString;
        }
    }
    
    public partial class FinanceManagerCacheSyncAgent : Microsoft.Synchronization.SyncAgent {
        
        private CompanyProfileSyncTable _companyProfileSyncTable;
        
        private MembersSyncTable _membersSyncTable;
        
        partial void OnInitialized();
        
        public FinanceManagerCacheSyncAgent() {
            this.InitializeSyncProviders();
            this.InitializeSyncTables();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CompanyProfileSyncTable CompanyProfile {
            get {
                return this._companyProfileSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._companyProfileSyncTable);
                this._companyProfileSyncTable = value;
                this.Configuration.SyncTables.Add(this._companyProfileSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MembersSyncTable Members {
            get {
                return this._membersSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._membersSyncTable);
                this._membersSyncTable = value;
                this.Configuration.SyncTables.Add(this._membersSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncProviders() {
            // Create SyncProviders.
            this.RemoteProvider = new FinanceManagerCacheServerSyncProvider();
            this.LocalProvider = new FinanceManagerCacheClientSyncProvider();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncTables() {
            // Create SyncTables.
            this._companyProfileSyncTable = new CompanyProfileSyncTable();
            this._companyProfileSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("CompanyProfileSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._companyProfileSyncTable);
            this._membersSyncTable = new MembersSyncTable();
            this._membersSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("MembersSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._membersSyncTable);
        }
        
        public partial class CompanyProfileSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public CompanyProfileSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "CompanyProfile";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class MembersSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public MembersSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "Members";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
    }
}
namespace LoanWebApplication4 {
    
    
    public partial class CompanyProfileSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public CompanyProfileSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // CompanyProfileSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.CompanyProfile ON ;WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) INSERT INTO dbo.CompanyProfile ([CompanyName], [CompanyId], [address], [Email], [website], [EndOfDayLastRunDate], [DefaultInterestRateTypeId], [SimpleInterestRate], [CompoundFrequency], [CompoundInterestRate], [DefaultersInteresty], [ExcludeSundaysFromCalculations], [ExcludeSaturdayFromCalculations], [CompanyLogo], [LogoFileExt], [AutoGenerateAccountNumbers]) VALUES (@CompanyName, @CompanyId, @address, @Email, @website, @EndOfDayLastRunDate, @DefaultInterestRateTypeId, @SimpleInterestRate, @CompoundFrequency, @CompoundInterestRate, @DefaultersInteresty, @ExcludeSundaysFromCalculations, @ExcludeSaturdayFromCalculations, @CompanyLogo, @LogoFileExt, @AutoGenerateAccountNumbers) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.CompanyProfile')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.CompanyProfile')  SET IDENTITY_INSERT dbo.CompanyProfile OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyId", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@website", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndOfDayLastRunDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultInterestRateTypeId", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SimpleInterestRate", System.Data.SqlDbType.Decimal));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompoundFrequency", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompoundInterestRate", System.Data.SqlDbType.Decimal));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultersInteresty", System.Data.SqlDbType.Decimal));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExcludeSundaysFromCalculations", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExcludeSaturdayFromCalculations", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyLogo", System.Data.SqlDbType.Image));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LogoFileExt", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AutoGenerateAccountNumbers", System.Data.SqlDbType.Bit));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            // CompanyProfileSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @";WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) DELETE dbo.CompanyProfile FROM dbo.CompanyProfile JOIN CHANGETABLE(VERSION dbo.CompanyProfile, ([CompanyId]), (@CompanyId)) CT  ON CT.[CompanyId] = dbo.CompanyProfile.[CompanyId] WHERE (@sync_force_write = 1 OR CT.SYS_CHANGE_VERSION IS NULL OR CT.SYS_CHANGE_VERSION <= @sync_last_received_anchor OR (CT.SYS_CHANGE_CONTEXT IS NOT NULL AND CT.SYS_CHANGE_CONTEXT = @sync_client_id_binary)) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.CompanyProfile')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.CompanyProfile') ";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyId", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // CompanyProfileSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @";WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) UPDATE dbo.CompanyProfile SET [CompanyName] = @CompanyName, [address] = @address, [Email] = @Email, [website] = @website, [EndOfDayLastRunDate] = @EndOfDayLastRunDate, [DefaultInterestRateTypeId] = @DefaultInterestRateTypeId, [SimpleInterestRate] = @SimpleInterestRate, [CompoundFrequency] = @CompoundFrequency, [CompoundInterestRate] = @CompoundInterestRate, [DefaultersInteresty] = @DefaultersInteresty, [ExcludeSundaysFromCalculations] = @ExcludeSundaysFromCalculations, [ExcludeSaturdayFromCalculations] = @ExcludeSaturdayFromCalculations, [CompanyLogo] = @CompanyLogo, [LogoFileExt] = @LogoFileExt, [AutoGenerateAccountNumbers] = @AutoGenerateAccountNumbers FROM dbo.CompanyProfile  JOIN CHANGETABLE(VERSION dbo.CompanyProfile, ([CompanyId]), (@CompanyId)) CT  ON CT.[CompanyId] = dbo.CompanyProfile.[CompanyId] WHERE (@sync_force_write = 1 OR CT.SYS_CHANGE_VERSION IS NULL OR CT.SYS_CHANGE_VERSION <= @sync_last_received_anchor OR (CT.SYS_CHANGE_CONTEXT IS NOT NULL AND CT.SYS_CHANGE_CONTEXT = @sync_client_id_binary)) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.CompanyProfile')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.CompanyProfile') ";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@website", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndOfDayLastRunDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultInterestRateTypeId", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SimpleInterestRate", System.Data.SqlDbType.Decimal));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompoundFrequency", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompoundInterestRate", System.Data.SqlDbType.Decimal));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultersInteresty", System.Data.SqlDbType.Decimal));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExcludeSundaysFromCalculations", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExcludeSaturdayFromCalculations", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyLogo", System.Data.SqlDbType.Image));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LogoFileExt", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AutoGenerateAccountNumbers", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyId", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // CompanyProfileSyncTableSelectConflictDeletedRowsCommand command.
            this.SelectConflictDeletedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictDeletedRowsCommand.CommandText = "SELECT CT.[CompanyId], CT.SYS_CHANGE_CONTEXT, CT.SYS_CHANGE_VERSION FROM CHANGETA" +
                "BLE(CHANGES dbo.CompanyProfile, @sync_last_received_anchor) CT WHERE (CT.[Compan" +
                "yId] = @CompanyId AND CT.SYS_CHANGE_OPERATION = \'D\')";
            this.SelectConflictDeletedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyId", System.Data.SqlDbType.Int));
            // CompanyProfileSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [CompanyName], dbo.CompanyProfile.[CompanyId], [address], [Email], [website], [EndOfDayLastRunDate], [DefaultInterestRateTypeId], [SimpleInterestRate], [CompoundFrequency], [CompoundInterestRate], [DefaultersInteresty], [ExcludeSundaysFromCalculations], [ExcludeSaturdayFromCalculations], [CompanyLogo], [LogoFileExt], [AutoGenerateAccountNumbers], CT.SYS_CHANGE_CONTEXT, CT.SYS_CHANGE_VERSION FROM dbo.CompanyProfile JOIN CHANGETABLE(VERSION dbo.CompanyProfile, ([CompanyId]), (@CompanyId)) CT  ON CT.[CompanyId] = dbo.CompanyProfile.[CompanyId]";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyId", System.Data.SqlDbType.Int));
            // CompanyProfileSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "IF @sync_initialized = 0 SELECT [CompanyName], dbo.CompanyProfile.[CompanyId], [a" +
                "ddress], [Email], [website], [EndOfDayLastRunDate], [DefaultInterestRateTypeId]," +
                " [SimpleInterestRate], [CompoundFrequency], [CompoundInterestRate], [DefaultersI" +
                "nteresty], [ExcludeSundaysFromCalculations], [ExcludeSaturdayFromCalculations], " +
                "[CompanyLogo], [LogoFileExt], [AutoGenerateAccountNumbers] FROM dbo.CompanyProfi" +
                "le LEFT OUTER JOIN CHANGETABLE(CHANGES dbo.CompanyProfile, @sync_last_received_a" +
                "nchor) CT ON CT.[CompanyId] = dbo.CompanyProfile.[CompanyId] WHERE (CT.SYS_CHANG" +
                "E_CONTEXT IS NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary) ELSE  BEGI" +
                "N SELECT [CompanyName], dbo.CompanyProfile.[CompanyId], [address], [Email], [web" +
                "site], [EndOfDayLastRunDate], [DefaultInterestRateTypeId], [SimpleInterestRate]," +
                " [CompoundFrequency], [CompoundInterestRate], [DefaultersInteresty], [ExcludeSun" +
                "daysFromCalculations], [ExcludeSaturdayFromCalculations], [CompanyLogo], [LogoFi" +
                "leExt], [AutoGenerateAccountNumbers] FROM dbo.CompanyProfile JOIN CHANGETABLE(CH" +
                "ANGES dbo.CompanyProfile, @sync_last_received_anchor) CT ON CT.[CompanyId] = dbo" +
                ".CompanyProfile.[CompanyId] WHERE (CT.SYS_CHANGE_OPERATION = \'I\' AND CT.SYS_CHAN" +
                "GE_CREATION_VERSION  <= @sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS " +
                "NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MI" +
                "N_VALID_VERSION(object_id(N\'dbo.CompanyProfile\')) > @sync_last_received_anchor R" +
                "AISERROR (N\'SQL Server Change Tracking has cleaned up tracking information for t" +
                "able \'\'%s\'\'. To recover from this error, the client must reinitialize its local " +
                "database and try again\',16,3,N\'dbo.CompanyProfile\')  END ";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            // CompanyProfileSyncTableSelectIncrementalDeletesCommand command.
            this.SelectIncrementalDeletesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalDeletesCommand.CommandText = @"IF @sync_initialized > 0  BEGIN SELECT CT.[CompanyId] FROM CHANGETABLE(CHANGES dbo.CompanyProfile, @sync_last_received_anchor) CT WHERE (CT.SYS_CHANGE_OPERATION = 'D' AND CT.SYS_CHANGE_VERSION <= @sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.CompanyProfile')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.CompanyProfile')  END ";
            this.SelectIncrementalDeletesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            // CompanyProfileSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"IF @sync_initialized > 0  BEGIN SELECT [CompanyName], dbo.CompanyProfile.[CompanyId], [address], [Email], [website], [EndOfDayLastRunDate], [DefaultInterestRateTypeId], [SimpleInterestRate], [CompoundFrequency], [CompoundInterestRate], [DefaultersInteresty], [ExcludeSundaysFromCalculations], [ExcludeSaturdayFromCalculations], [CompanyLogo], [LogoFileExt], [AutoGenerateAccountNumbers] FROM dbo.CompanyProfile JOIN CHANGETABLE(CHANGES dbo.CompanyProfile, @sync_last_received_anchor) CT ON CT.[CompanyId] = dbo.CompanyProfile.[CompanyId] WHERE (CT.SYS_CHANGE_OPERATION = 'U' AND CT.SYS_CHANGE_VERSION <= @sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.CompanyProfile')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.CompanyProfile')  END ";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "CompanyProfile";
        }
    }
    
    public partial class MembersSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public MembersSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // MembersSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.Members ON ;WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) INSERT INTO dbo.Members ([MemberId], [MemberFirstName], [MemberLastName], [MemberPhoto], [Balance], [MemberBranch], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [AccountNumber], [CurrentLoanId], [Fax], [Telephone], [Address], [ResidentialAddress], [BusinessAddress], [Gender], [OtherName], [ContactPerson], [IdentityTypeID], [IdentityNumber], [DOB], [Mobile]) VALUES (@MemberId, @MemberFirstName, @MemberLastName, @MemberPhoto, @Balance, @MemberBranch, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate, @AccountNumber, @CurrentLoanId, @Fax, @Telephone, @Address, @ResidentialAddress, @BusinessAddress, @Gender, @OtherName, @ContactPerson, @IdentityTypeID, @IdentityNumber, @DOB, @Mobile) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.Members')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.Members')  SET IDENTITY_INSERT dbo.Members OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberId", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberFirstName", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberLastName", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberPhoto", System.Data.SqlDbType.Image));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Balance", System.Data.SqlDbType.Money));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberBranch", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ModifiedBy", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ModifiedDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNumber", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentLoanId", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Telephone", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResidentialAddress", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BusinessAddress", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Gender", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherName", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactPerson", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityTypeID", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNumber", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DOB", System.Data.SqlDbType.Date));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Mobile", System.Data.SqlDbType.NVarChar));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            // MembersSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @";WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) DELETE dbo.Members FROM dbo.Members JOIN CHANGETABLE(VERSION dbo.Members, ([MemberId]), (@MemberId)) CT  ON CT.[MemberId] = dbo.Members.[MemberId] WHERE (@sync_force_write = 1 OR CT.SYS_CHANGE_VERSION IS NULL OR CT.SYS_CHANGE_VERSION <= @sync_last_received_anchor OR (CT.SYS_CHANGE_CONTEXT IS NOT NULL AND CT.SYS_CHANGE_CONTEXT = @sync_client_id_binary)) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.Members')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.Members') ";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberId", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // MembersSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @";WITH CHANGE_TRACKING_CONTEXT (@sync_client_id_binary) UPDATE dbo.Members SET [MemberFirstName] = @MemberFirstName, [MemberLastName] = @MemberLastName, [MemberPhoto] = @MemberPhoto, [Balance] = @Balance, [MemberBranch] = @MemberBranch, [CreatedBy] = @CreatedBy, [CreatedDate] = @CreatedDate, [ModifiedBy] = @ModifiedBy, [ModifiedDate] = @ModifiedDate, [AccountNumber] = @AccountNumber, [CurrentLoanId] = @CurrentLoanId, [Fax] = @Fax, [Telephone] = @Telephone, [Address] = @Address, [ResidentialAddress] = @ResidentialAddress, [BusinessAddress] = @BusinessAddress, [Gender] = @Gender, [OtherName] = @OtherName, [ContactPerson] = @ContactPerson, [IdentityTypeID] = @IdentityTypeID, [IdentityNumber] = @IdentityNumber, [DOB] = @DOB, [Mobile] = @Mobile FROM dbo.Members  JOIN CHANGETABLE(VERSION dbo.Members, ([MemberId]), (@MemberId)) CT  ON CT.[MemberId] = dbo.Members.[MemberId] WHERE (@sync_force_write = 1 OR CT.SYS_CHANGE_VERSION IS NULL OR CT.SYS_CHANGE_VERSION <= @sync_last_received_anchor OR (CT.SYS_CHANGE_CONTEXT IS NOT NULL AND CT.SYS_CHANGE_CONTEXT = @sync_client_id_binary)) SET @sync_row_count = @@rowcount; IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.Members')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.Members') ";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberFirstName", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberLastName", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberPhoto", System.Data.SqlDbType.Image));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Balance", System.Data.SqlDbType.Money));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberBranch", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ModifiedBy", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ModifiedDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNumber", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentLoanId", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fax", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Telephone", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResidentialAddress", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BusinessAddress", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Gender", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherName", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContactPerson", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityTypeID", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNumber", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DOB", System.Data.SqlDbType.Date));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Mobile", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberId", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // MembersSyncTableSelectConflictDeletedRowsCommand command.
            this.SelectConflictDeletedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictDeletedRowsCommand.CommandText = "SELECT CT.[MemberId], CT.SYS_CHANGE_CONTEXT, CT.SYS_CHANGE_VERSION FROM CHANGETAB" +
                "LE(CHANGES dbo.Members, @sync_last_received_anchor) CT WHERE (CT.[MemberId] = @M" +
                "emberId AND CT.SYS_CHANGE_OPERATION = \'D\')";
            this.SelectConflictDeletedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectConflictDeletedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberId", System.Data.SqlDbType.Int));
            // MembersSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT dbo.Members.[MemberId], [MemberFirstName], [MemberLastName], [MemberPhoto], [Balance], [MemberBranch], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [AccountNumber], [CurrentLoanId], [Fax], [Telephone], [Address], [ResidentialAddress], [BusinessAddress], [Gender], [OtherName], [ContactPerson], [IdentityTypeID], [IdentityNumber], [DOB], [Mobile], CT.SYS_CHANGE_CONTEXT, CT.SYS_CHANGE_VERSION FROM dbo.Members JOIN CHANGETABLE(VERSION dbo.Members, ([MemberId]), (@MemberId)) CT  ON CT.[MemberId] = dbo.Members.[MemberId]";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MemberId", System.Data.SqlDbType.Int));
            // MembersSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "IF @sync_initialized = 0 SELECT dbo.Members.[MemberId], [MemberFirstName], [Membe" +
                "rLastName], [MemberPhoto], [Balance], [MemberBranch], [CreatedBy], [CreatedDate]" +
                ", [ModifiedBy], [ModifiedDate], [AccountNumber], [CurrentLoanId], [Fax], [Teleph" +
                "one], [Address], [ResidentialAddress], [BusinessAddress], [Gender], [OtherName]," +
                " [ContactPerson], [IdentityTypeID], [IdentityNumber], [DOB], [Mobile] FROM dbo.M" +
                "embers LEFT OUTER JOIN CHANGETABLE(CHANGES dbo.Members, @sync_last_received_anch" +
                "or) CT ON CT.[MemberId] = dbo.Members.[MemberId] WHERE (CT.SYS_CHANGE_CONTEXT IS" +
                " NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary) ELSE  BEGIN SELECT dbo" +
                ".Members.[MemberId], [MemberFirstName], [MemberLastName], [MemberPhoto], [Balanc" +
                "e], [MemberBranch], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [A" +
                "ccountNumber], [CurrentLoanId], [Fax], [Telephone], [Address], [ResidentialAddre" +
                "ss], [BusinessAddress], [Gender], [OtherName], [ContactPerson], [IdentityTypeID]" +
                ", [IdentityNumber], [DOB], [Mobile] FROM dbo.Members JOIN CHANGETABLE(CHANGES db" +
                "o.Members, @sync_last_received_anchor) CT ON CT.[MemberId] = dbo.Members.[Member" +
                "Id] WHERE (CT.SYS_CHANGE_OPERATION = \'I\' AND CT.SYS_CHANGE_CREATION_VERSION  <= " +
                "@sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS NULL OR CT.SYS_CHANGE_CO" +
                "NTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MIN_VALID_VERSION(object_i" +
                "d(N\'dbo.Members\')) > @sync_last_received_anchor RAISERROR (N\'SQL Server Change T" +
                "racking has cleaned up tracking information for table \'\'%s\'\'. To recover from th" +
                "is error, the client must reinitialize its local database and try again\',16,3,N\'" +
                "dbo.Members\')  END ";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            // MembersSyncTableSelectIncrementalDeletesCommand command.
            this.SelectIncrementalDeletesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalDeletesCommand.CommandText = @"IF @sync_initialized > 0  BEGIN SELECT CT.[MemberId] FROM CHANGETABLE(CHANGES dbo.Members, @sync_last_received_anchor) CT WHERE (CT.SYS_CHANGE_OPERATION = 'D' AND CT.SYS_CHANGE_VERSION <= @sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.Members')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.Members')  END ";
            this.SelectIncrementalDeletesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalDeletesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
            // MembersSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"IF @sync_initialized > 0  BEGIN SELECT dbo.Members.[MemberId], [MemberFirstName], [MemberLastName], [MemberPhoto], [Balance], [MemberBranch], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [AccountNumber], [CurrentLoanId], [Fax], [Telephone], [Address], [ResidentialAddress], [BusinessAddress], [Gender], [OtherName], [ContactPerson], [IdentityTypeID], [IdentityNumber], [DOB], [Mobile] FROM dbo.Members JOIN CHANGETABLE(CHANGES dbo.Members, @sync_last_received_anchor) CT ON CT.[MemberId] = dbo.Members.[MemberId] WHERE (CT.SYS_CHANGE_OPERATION = 'U' AND CT.SYS_CHANGE_VERSION <= @sync_new_received_anchor AND (CT.SYS_CHANGE_CONTEXT IS NULL OR CT.SYS_CHANGE_CONTEXT <> @sync_client_id_binary)); IF CHANGE_TRACKING_MIN_VALID_VERSION(object_id(N'dbo.Members')) > @sync_last_received_anchor RAISERROR (N'SQL Server Change Tracking has cleaned up tracking information for table ''%s''. To recover from this error, the client must reinitialize its local database and try again',16,3,N'dbo.Members')  END ";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_initialized", System.Data.SqlDbType.Bit));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_client_id_binary", System.Data.SqlDbType.VarBinary));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "Members";
        }
    }
    
    public partial class FinanceManagerCacheServerSyncProvider : Microsoft.Synchronization.Data.Server.DbServerSyncProvider {
        
        private CompanyProfileSyncAdapter _companyProfileSyncAdapter;
        
        private MembersSyncAdapter _membersSyncAdapter;
        
        partial void OnInitialized();
        
        public FinanceManagerCacheServerSyncProvider() {
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["FinanceManagerConnectionString"].ConnectionString;
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        public FinanceManagerCacheServerSyncProvider(string connectionString) {
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CompanyProfileSyncAdapter CompanyProfileSyncAdapter {
            get {
                return this._companyProfileSyncAdapter;
            }
            set {
                this._companyProfileSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MembersSyncAdapter MembersSyncAdapter {
            get {
                return this._membersSyncAdapter;
            }
            set {
                this._membersSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeConnection(string connectionString) {
            this.Connection = new System.Data.SqlClient.SqlConnection(connectionString);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncAdapters() {
            // Create SyncAdapters.
            this._companyProfileSyncAdapter = new CompanyProfileSyncAdapter();
            this.SyncAdapters.Add(this._companyProfileSyncAdapter);
            this._membersSyncAdapter = new MembersSyncAdapter();
            this.SyncAdapters.Add(this._membersSyncAdapter);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeNewAnchorCommand() {
            // selectNewAnchorCmd command.
            this.SelectNewAnchorCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectNewAnchorCommand.CommandText = "Select @sync_new_received_anchor = CHANGE_TRACKING_CURRENT_VERSION()";
            this.SelectNewAnchorCommand.CommandType = System.Data.CommandType.Text;
            System.Data.SqlClient.SqlParameter selectnewanchorcommand_sync_new_received_anchorParameter = new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.BigInt);
            selectnewanchorcommand_sync_new_received_anchorParameter.Direction = System.Data.ParameterDirection.Output;
            this.SelectNewAnchorCommand.Parameters.Add(selectnewanchorcommand_sync_new_received_anchorParameter);
        }
    }
}
